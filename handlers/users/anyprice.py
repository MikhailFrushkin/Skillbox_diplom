import asyncio
from datetime import datetime, date

from aiogram import types
from aiogram.dispatcher import FSMContext
from loguru import logger
from telegram_bot_calendar import DetailedTelegramCalendar

from data import config
from data.config import path
from data.handler_request import handler_request
from data.requests import get_city_id, get_hotels
from handlers.users.back import back
from keyboards.default.menu import back_button, menu
from keyboards.inline.is_photo import is_photo
from loader import dp, bot
from states.States import Anyprice
from utils.chek_local import locale_check
from utils.del_message import delete_message


async def get_any_price(message: types.Message, state: FSMContext) -> None:
    """
    –ü–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–æ–º–∞–Ω–¥—É /lowprice –∏–ª–∏ /highprice –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–∏—é —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç—ã –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π states.Anyprice
    :param state: –î–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    :param message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {}: {} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–º–∞–Ω–¥—É /lowprice –∏–ª–∏  /highprice'.format(
        message.from_user.id,
        message.from_user.username))
    mes = await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥, –≥–¥–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –æ—Ç–µ–ª—å.', reply_markup=back_button)
    await bot.delete_message(message.chat.id, message.message_id)
    async with state.proxy() as data:
        data['command'] = message.get_command()
        data['temp_mes'] = mes

        if message.get_command() == '/lowprice' or message.text == '–ü–æ–∏—Å–∫ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ü–µ–Ω—ã':
            data['price_sort'] = 'PRICE'
        elif message.get_command() == '/highprice' or message.text == '–ü–æ–∏—Å–∫ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Ü–µ–Ω—ã':
            data['price_sort'] = 'PRICE_HIGHEST_FIRST'

    await Anyprice.city.set()


@dp.message_handler(state=Anyprice.city)
async def answer_city(message: types.Message, state: FSMContext) -> None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –∏–∑ get_any_price —Ö—ç–Ω–¥–ª–µ—Ä–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –∫—ç—à, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å,
    —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ state —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.
    :param message: –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ state
    :param state: –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    if message.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await back(message, state)
    else:
        async with state.proxy() as data:
            await bot.send_message(message.from_user.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥: {}'.format(message.text.title()),
                                   reply_markup=back_button)
            asyncio.create_task(delete_message(message))
            answer = message.text.lower()
            locale = config.locales[locale_check(answer)].get('locale')
            currency = config.locales[locale_check(answer)].get('currency')
            with open('{}/stikers/seach.tgs'.format(path), 'rb') as sticker:
                sticker = await message.answer_sticker(sticker)
            city_id = await get_city_id(answer, locale)
            if city_id:
                logger.info('–°–æ—Ö—Ä–∞–Ω—è—é –æ—Ç–≤–µ—Ç –≤ state: city')

                asyncio.create_task(delete_message(data['temp_mes']))
                mes = await message.answer(
                    '–°–∫–æ–ª—å–∫–æ –æ—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑–∞—Ç—å? (–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ: {})'.format(config.MAX_HOTELS_TO_SHOW))
                data['city'] = answer
                data['city_id'] = city_id
                data['locale'] = locale
                data['currency'] = currency
                data['temp_mes'] = mes

                logger.info('–°–æ—Ö—Ä–∞–Ω—è—é –æ—Ç–≤–µ—Ç –≤ state: hotel_amount')
                await Anyprice.next()
            else:
                await bot.send_message(message.from_user.id, 'üòì–£–ø—Å.–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω –≥–æ—Ä–æ–¥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.')
            asyncio.create_task(delete_message(sticker))


@dp.message_handler(state=Anyprice.hotel_amount)
async def answer_hotel_amount(message: types.Message, state: FSMContext) -> None:
    """
       –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –∏–∑ answer_city —Ö—ç–Ω–¥–ª–µ—Ä–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –∫—ç—à, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å,
       —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ state —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.
       :param message: –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ state
       :param state: –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
       """
    if message.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await back(message, state)
    else:
        if not message.text.isdigit():
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏')
            await answer_hotel_amount(message, state)
        else:
            logger.info('–ü–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç: {}. –°–æ—Ö—Ä–∞–Ω—è—é –≤ state'.format(message.text))
            asyncio.create_task(delete_message(message))
            await bot.send_message(message.from_user.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ—Ç–µ–ª–µ–π: {}'.format(message.text),
                                   reply_markup=back_button)
            async with state.proxy() as data:
                data['hotels_amount'] = int(message.text)
                asyncio.create_task(delete_message(data['temp_mes']))
                mes = await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞')
                data['temp_mes'] = mes
                logger.info('–í—ã–∑—ã–≤–∞—é –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–µ–∑–¥–∞')
            LSTEP = {'y': '–≥–æ–¥', 'm': '–º–µ—Å—è—Ü', 'd': '–¥–µ–Ω—å'}
            min_date = list(map(lambda x: int(x), datetime.now().strftime('%Y %m %d').split()))
            calendar, step = DetailedTelegramCalendar(locale='ru', min_date=date(*min_date)).build()
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ {}'.format(LSTEP[step]), reply_markup=calendar)
            await Anyprice.next()


@dp.callback_query_handler(DetailedTelegramCalendar.func(), state=Anyprice.check_in_date)
async def inline_kb_answer_callback_handler(call: types.CallbackQuery, state: FSMContext) -> None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –∏–∑ —Ö—ç–Ω–¥–ª–µ—Ä–∞ –æ –¥–∞—Ç–µ –∑–∞–µ–∑–¥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ state
    :param call: –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ state
    :param state: –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    LSTEP = {'y': '–≥–æ–¥', 'm': '–º–µ—Å—è—Ü', 'd': '–¥–µ–Ω—å'}
    min_date = list(map(lambda x: int(x), datetime.now().strftime('%Y %m %d').split()))
    result, key, step = DetailedTelegramCalendar(locale='ru', min_date=date(*min_date)).process(call.data)
    async with state.proxy() as data:
        if not result and key:
            await bot.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ {}'.format(LSTEP[step]),
                                        call.message.chat.id,
                                        call.message.message_id,
                                        reply_markup=key)
        elif result:
            result_list = str(result).split('-')
            await bot.edit_message_text('–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞: {}-{}-{}'.format(result_list[2],
                                                                       result_list[1],
                                                                       result_list[0]),
                                        call.message.chat.id,
                                        call.message.message_id)
            logger.info('–ü–æ–ª—É—á–∏–ª–∏ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞: - {}'.format(result))
            data['check_in'] = str(result)
            logger.info('–°–æ—Ö—Ä–∞–Ω—è—é –æ—Ç–≤–µ—Ç –≤ state: check_in_date')
            asyncio.create_task(delete_message(data['temp_mes']))
            mes = await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞')
            data['temp_mes'] = mes
            logger.info('–í—ã–∑—ã–≤–∞—é –ö–∞–ª–µ–Ω–¥–∞—Ä—å –≤—ã–µ–∑–¥–∞')
            calendar, step = DetailedTelegramCalendar(locale='ru', min_date=date(*min_date)).build()
            await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ {}'.format(LSTEP[step]), reply_markup=calendar)
            await Anyprice.next()


@dp.callback_query_handler(DetailedTelegramCalendar.func(), state=Anyprice.check_out_date)
async def inline_kb_answer_callback_handler(call: types.CallbackQuery, state: FSMContext) -> None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –∏–∑ —Ö—ç–Ω–¥–ª–µ—Ä–∞ –æ –¥–∞—Ç–µ –≤—ã–µ–∑–¥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ state
    :param call: –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ state
    :param state: –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    LSTEP = {'y': '–≥–æ–¥', 'm': '–º–µ—Å—è—Ü', 'd': '–¥–µ–Ω—å'}
    min_date = list(map(lambda x: int(x), datetime.now().strftime('%Y %m %d').split()))
    result, key, step = DetailedTelegramCalendar(locale='ru', min_date=date(*min_date)).process(call.data)
    async with state.proxy() as data:
        if not result and key:
            await bot.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ {}'.format(LSTEP[step]),
                                        call.message.chat.id,
                                        call.message.message_id,
                                        reply_markup=key)
        elif result:
            result_list = str(result).split('-')
            await bot.edit_message_text('–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: {}-{}-{}'.format(result_list[2],
                                                                       result_list[1],
                                                                       result_list[0]),
                                        call.message.chat.id,
                                        call.message.message_id)
            logger.info('–ü–æ–ª—É—á–∏–ª–∏ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞: - {}'.format(result))
            data['check_out'] = str(result)
            asyncio.create_task(delete_message(data['temp_mes']))
            logger.info('–°–æ—Ö—Ä–∞–Ω—è—é –æ—Ç–≤–µ—Ç –≤ state: check_out_date')
            mes = await call.message.answer('–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏?', reply_markup=is_photo)
            data['temp_mes'] = mes
            await Anyprice.next()


@dp.callback_query_handler(state=Anyprice.IsPhoto)
async def answer_is_photo(call: types.CallbackQuery, state: FSMContext) -> None:
    """
        –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç , —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –∫—ç—à, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ—à–ª–æ–≥–æ –æ—Ç–≤–µ—Ç–∞,
        –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∏–Ω–∞—á–µ –∏–¥–µ–º –≤ —Å–ª–µ–¥—É—é—â–∏–π state
        :param call: –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ state
        :param state: –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        """
    await call.answer(cache_time=60)
    answer: str = call.data
    logger.info('–ü–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç: {}. –°–æ—Ö—Ä–∞–Ω—è—é –≤ state'.format(answer))
    async with state.proxy() as data:
        asyncio.create_task(delete_message(data['temp_mes']))
        data['is_photo']: str = answer
        if data['is_photo'] == '–¥–∞':
            mes = await call.message.answer('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. (max: {})'.format(config.MAX_PHOTO_TO_SHOW))
            data['temp_mes'] = mes
            await Anyprice.next()
        elif data['is_photo'] == '–Ω–µ—Ç':
            mes = await call.message.answer('–ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –æ–∂–∏–¥–∞–π—Ç–µ...')
            with open('{}/stikers/seach.tgs'.format(path), 'rb') as sticker:
                sticker = await call.message.answer_sticker(sticker)
            data['temp_mes'] = mes
            hotels = await get_hotels(city_id=data['city_id'], hotels_amount=data['hotels_amount'],
                                      currency=data['currency'], locale=data['locale'],
                                      check_in=data['check_in'], check_out=data['check_out'],
                                      price_sort=data['price_sort'])
            if not hotels:
                mes = await call.message.answer('üòì–ì–æ—Å—Ç–∏–Ω–∏—Ü –ø–æ –í–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
                data['temp_mes'] = mes
            else:
                data_to_user_response = await handler_request(request=hotels, message_data=data, is_photo=False)
                for hotel in data_to_user_response:
                    result: str = await _print_result(hotel)
                    await call.message.answer(result, disable_web_page_preview=True, reply_markup=menu)
                    asyncio.create_task(delete_message(data['temp_mes']))
                asyncio.create_task(delete_message(sticker))
            await state.reset_state()
            logger.info('–û—á–∏—Å—Ç–∏–ª state')


@dp.message_handler(state=Anyprice.Photo_amount)
async def answer_photo_amount(message: types.Message, state: FSMContext) -> None:
    """
       –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –∏–∑ answer_is_photo —Ö—ç–Ω–¥–ª–µ—Ä–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –∫—ç—à.
       –î–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ RapidApi, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

       :param message: –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ state
       :param state: –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
       """
    if message.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await back(message, state)
    else:
        asyncio.create_task(delete_message(message))
        answer = message.text
        if not message.text.isdigit():
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏')
            await answer_photo_amount(message, state)
        else:
            await bot.send_message(message.from_user.id, '–í—ã–±—Ä–∞–Ω–æ –∫ –ø–æ–∫–∞–∑—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {}'.format(message.text),
                                   reply_markup=back_button)
            asyncio.create_task(delete_message(message))

            async with state.proxy() as data:
                asyncio.create_task(delete_message(data['temp_mes']))
                data['photo_amount'] = int(answer)
                mes = await message.answer('–ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –æ–∂–∏–¥–∞–π—Ç–µ...')
                with open('{}/stikers/seach.tgs'.format(path), 'rb') as sticker:
                    sticker = await message.answer_sticker(sticker)
                data['temp_mes'] = mes
                hotels: list = await get_hotels(city_id=data['city_id'], hotels_amount=data['hotels_amount'],
                                                currency=data['currency'], locale=data['locale'],
                                                check_in=data['check_in'], check_out=data['check_out'],
                                                price_sort=data['price_sort'])

                if not hotels:
                    await message.answer('–ì–æ—Å—Ç–∏–Ω–∏—Ü –ø–æ –í–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')
                else:
                    data_to_user_response = await handler_request(request=hotels, message_data=data, is_photo=True)
                    for hotel in data_to_user_response:
                        try:
                            if len(hotel['photo_url']) >= 2:
                                media = types.MediaGroup()
                                for photo in hotel['photo_url']:
                                    media.attach_photo(photo)
                                await message.answer_media_group(media)
                            else:
                                await message.answer_photo(hotel['photo_url'][0])
                        except Exception as ex:
                            logger.debug('–û—à–∏–±–∫–∞ –≤ –ø–æ–∫–∞–∑–µ —Ñ–æ—Ç–æ {}'.format(ex))
                        result: str = await _print_result(hotel, data)
                        await message.answer(result, disable_web_page_preview=True, reply_markup=menu)
                    asyncio.create_task(delete_message(sticker))
                    asyncio.create_task(delete_message(data['temp_mes']))
            await state.reset_state()
            logger.info('–û—á–∏—Å—Ç–∏–ª state')


async def _print_result(hotel: dict, data: dict) -> str:
    hotel_id = hotel.get('hotel_id')
    result = 'üè´–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {name}\n' \
             'üì™–ê–¥—Ä–µ—Å: {adress}\n' \
             'üöï–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞: {dist}\n' \
             'üí¥–¶–µ–Ω–∞ –∑–∞ –Ω–æ—á—å: {price}\n' \
             'üí∞–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {fullprice}\n' \
             '–°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç–µ–ª—å: {url}'.format(name=hotel.get("hotel_name"),
                                             adress=hotel.get("address"),
                                             dist=hotel.get("distance_from_center"),
                                             price=hotel.get("price"),
                                             fullprice=_calculation_date(hotel, data),
                                             url='hotels.com/ho{}'.format(
                                                 hotel_id
                                             )
                                             )

    return result


def _calculation_date(hotel, data: dict) -> int:
    import datetime
    a = [int(i) for i in data['check_in'].split('-')]
    b = [int(i) for i in data['check_out'].split('-')]
    c = datetime.datetime(b[0], b[1], b[2]) - datetime.datetime(a[0], a[1], a[2])
    result = int(str(c).split(' ')[0]) * int(hotel.get('price')[1:])
    return result
